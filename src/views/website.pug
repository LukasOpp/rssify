extends layout

block variables
  - const websiteTitle = website.url.match(/https?:\/\/w*\.?([^\/?\#]+)/)[1]
  - const title = `${websiteTitle} | ${feed.title}`

block layout-content
    section.website-header
        a.back-link(href=`/feed/${feed.id}`) &#8592; Back to feed
        img(src=website.favicon_url, alt=websiteTitle, style='width: 1em; height: 1em; vertical-align: middle; margin-right: .5em;')
        h2(style="display: inline-block;") #{websiteTitle}
        form.delete(action=`/api/v1/website/${website.id}`, method='post')
            input(type="text", name="delete", hidden, value="delete")
            input.delete__button.delete__button--title(type='submit', value='')
        br
    details.website-settings
        summary
            include ./partials/icons/settings-icon.pug
            h3(style="display: inline-block;") Settings
        form.edit-website-url(action=`/api/v1/website/${website.id}`, method='post')
            div.url-container
                script.
                    function onURLInput(e) {
                        document.getElementById("hidden-url-container").innerHTML =  e.target.value;
                    }
                label(for='url') URL:
                input.url-input(
                    type='text', 
                    name='url', 
                    placeholder='Edit website url',
                    oninput='onURLInput'
                    autocomplete='off'
                    value=website.url
                )
                div#hidden-url-container(aria-hidden="true") #{feed.url}
                script.
                    document.getElementById("hidden-url-container").innerHTML = document.querySelector(".url-input").value;
            input(type='text', name='feedId', hidden, value=feed.id)
            input(
                type='submit', 
                value='Save changes', 
            )
        a(href=`/website/${website.id}/wizard`) ðŸª„ Wizard
        details.advanced-settings
            summary Advanced
            div.advanced-settings-editor
                form#post-selectors.edit-website-selectors(action=`/api/v1/website/${website.id}`, method='post')
                    label(for='post_selector') Post selector
                    input.post_selector(
                        type='text', 
                        name='post_selector', 
                        placeholder='CSS Post selector',
                        value=website.post_selector
                    )
                    label(for='title_selector') Title selector
                    input.title_selector(
                        type='text', 
                        name='title_selector', 
                        placeholder='CSS Title selector',
                        value=website.title_selector
                    )
                    label(for='url_selector') URL selector
                    input.url_selector(
                        type='text', 
                        name='url_selector', 
                        placeholder='CSS URL selector',
                        value=website.url_selector
                    )
                    label(for='date_selector') Date selector
                    input.date_selector(
                        type='text', 
                        name='date_selector', 
                        placeholder='CSS Date selector',
                        value=website.date_selector
                    )
                    label(for='content_selector') Content selector
                    input.content_selector(
                        type='text', 
                        name='content_selector', 
                        placeholder='CSS Content selector',
                        value=website.content_selector
                    )
                    label(for='author_selector') Author selector
                    input.author_selector(
                        type='text', 
                        name='author_selector', 
                        placeholder='CSS Author selector',
                        value=website.author_selector
                    )
                    label(for='date_regex') Date regex
                    input.date_regex(
                        type='text', 
                        name='date_regex', 
                        placeholder='Date regex',
                        value=website.date_regex
                    )
                    label(for='author_regex') Author regex
                    input.author_regex(
                        type='text', 
                        name='author_regex', 
                        placeholder='Author regex',
                        value=website.author_regex
                    )
                    input(
                        type='submit', 
                        value='Save changes', 
                    )
                iframe#site-renderer(data-src=website.latest_html, style="width: 100%; height: 50vh;")
    div.website-posts
        h3(style="display: inline-block;") Posts
        div#post-renderer
            include ./partials/posts/website-post-list.pug
    script.
        function updateResultingPosts() {
            const postSelectors = Object.fromEntries(new FormData(document.getElementById('post-selectors')))

            let href = window.location.href
            if (!href.endsWith('/')) {
                href += '/'
            }

            const websiteIdRegex = href.match(/website\/(.*?)\//);
            if (websiteIdRegex) {
                document.querySelector(".website-posts h3").insertAdjacentHTML('afterend', '<div class="loading-spinner"></div>');


                const websiteId = websiteIdRegex[1];
                fetch(`/api/v1/website/${websiteId}/wizard`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(postSelectors)
                })
                .then(response => response.text())
                .then(data => {
                    document.getElementById('post-renderer').innerHTML = data;
                })
                .catch(error => console.error('Error:', error))
                .finally(() => {
                    document.querySelector(".website-posts .loading-spinner").remove();
                });
            }
        }

        document.getElementById("post-selectors").querySelectorAll('input[type="text"]').forEach(input => {
            let timeout = null;
            input.addEventListener('input', function() {
                clearTimeout(timeout);
                timeout = setTimeout(updateResultingPosts, 500);
            });
        })

        function loadWebsiteOnAdvancedSettingsClick() {
            document.getElementById('site-renderer').srcdoc = document.getElementById('site-renderer').attributes['data-src'].value
        }

        document.querySelector('.advanced-settings summary').addEventListener('click', loadWebsiteOnAdvancedSettingsClick)